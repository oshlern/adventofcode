# https://www.codewars.com/kata/5993c1d917bc97d05d000068/train/python
def regex_divisible_by(n):
    if n == 1: return "^(0|1)+$"
    G = [[None for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for bit in range(2):
            G[i][(2*i+bit)%n] = "(" + str(bit) + ")"
    vs = list(range(n))
    while len(vs) > 1:
        v = vs.pop()
        for i in vs:
            for j in vs:
                if G[i][v] and G[v][j]:
                    new_edge = G[i][v] + (G[v][v]+"*" if G[v][v] else "") + G[v][j]
                    G[i][j] = (G[i][j][:-1] + "|" if G[i][j] else "(") + new_edge + ")"
    return "^" + G[0][0] + "+$"


# def regex_divisible_by(n):
#     if n == 1: return "^(0|1)+$"
#     G = [[None for _ in range(n)] for _ in range(n)]
#     for i in range(n):
#         for bit in range(2):
#             G[i][(2*i+bit)%n] = "(" + str(bit) + ")"
#     vs = list(range(n))
#     while len(vs) > 1:
#         v = vs.pop()
#         for i in vs:
#             for j in vs:
#                 if G[i][v] and G[v][j]:
#                     new_edge = G[i][v] + (G[v][v]+"*" if G[v][v] else "") + G[v][j]
# #                     if G[v][v]:
# #                         new_edge = G[i][v] + G[v][v] + "*" + G[v][j]
# #                     else:
# #                         new_edge =  G[i][v] + G[v][j]
# # #                     G[i][j] = (G[i][j][-1:] + "|" if G[i][j] else "(") + G[i][v] + G[v][j] + ")" 
# #                     if G[i][j]:
# #                         G[i][j] = G[i][j][:-1] + "|" + new_edge + ")"
# #                     else:
# #                         G[i][j] = "(" + new_edge + ")"
#                     G[i][j] = (G[i][j][:-1] + "|" if G[i][j] else "(") + new_edge + ")"
# #                     G[i][j] = (G[i][j][:-1]+"|" if G[i][j] else "(") + G[i][v]+(G[v][v]+"*" if G[v][v] else "")+G[v][j]+")" 
#     return "^" + G[0][0] + "+$"
#     return out
# #     # Your Code Here
# #     if n == 1:
# #         return "^[01]+$"
# #     if n == 2:
# #         return "^[01]+0$"
# #     return "^(?:00|11|(?:10(?:00|11)*01)|(?:1(?:00|11)*1))*0*$"
# 10101
# # 0
# # 11
# # 110
# # 1001
# # 1100
# # a*1+b*2+c*1+d*2 == 3

# # 11
# # 00
# # 10 | ___ | 01
# # 01 | ___ | 10

# # states mod 3
# # 0 -> *2
# # 1 -> *2 + 1
# G = []

# # def FSM_to_regex(G, st, en):
    

# # def FSM_to_regex(G, st, en):
# #     while old_vs:
# #         v = old_vs.pop()
# #         for v1 in incoming:
# #             for v2 in outgoing:
# #                 push_edge(v1,v2, v1[v]+v[v2])
# #                 delete_edge(v1, v)
# #                 delete_edge(v, v2)
# #         G[v]
    
# # def generate(regex):
    




# https://www.codewars.com/kata/56a73d2194505c29f600002d/train/python
# Write a string representing a regular expression to detect whether a binary number is divisible by 7
# It won't be accepted if you code something else like Function
# solution = r'^((1(01|1101*0)(001*0)*01|(0|111))|1(00|(01|1101*0)(001*0)*1)((00|1)0|((00|1)1|0101*0)(001*0)*1)*(011|((00|1)1|0101*0)(001*0)*01))$'
solution = r'^(0|1(00(10)*0|((01|101*0|00(10)*11)(1(10)*11|001*0)*1(10)*0))*(11|(01|101*0|00(10)*11)(1(10)*11|001*0)*01))+$'
# solution = r'^(0|1(00(10)*0)*11|1(01|101*0|00(10)*11)(1(10)*11|001*0|1(10)*0(00(10)*0)*(01|101*0|00(10)*11))*(01|1(10)*0(00(10)*0)*11))+$'
#  (0|1(00(10)*0|((01|101*0|00(10)*11)(1(10)*11|001*0)*1(10)*0))*(11|(01|101*0|00(10)*11)(1(10)*11|001*0)*01))
#  (0|1(00(10)*0 | ((01|101*0|00(10)*11) (1(10)*11|001*0)* 1(10)*0))*
#     (11 | (01|101*0|00(10)*11) (1(10)*11|001*0)* 01)
# *2+0/1
# 0: 0, 1
# 1: 2, 3
# 2: 4, 5
# 3: 6, 0
# 4: 1, 2
# 5: 3, 4
# 6: 5, 6

# 0: 0_0, 10_2 11_3
# 2: 4, 5
# 3: 6, 0
# 4: 00|1_2 01_3
# 5: 3, 4
# 6: 5, 6

# 0: 0_0, 100_4 101_5 11_3
# 3: 01*0_5, 0
# 4: (00|1)0_4 (00|1)1_5 01_3
# 5: 3, 4

# 0: (0|111)_0, 100_4 1(01|101*0)(001*0)*01_0
# 4: (00|1)0_4 ((00|1)1|0101*0)_5 011_0
# 5: 001*0_5 01_0, 4

# 0: (1(01|1101*0)(001*0)*01|(0|111))_0, 1(00|(01|1101*0)(001*0)*1)_4
# 4: ((00|1)0|((00|1)1|0101*0)(001*0)*1)_4 (011|((00|1)1|0101*0)(001*0)*01)_0

# 0: ((1(01|1101*0)(001*0)*01|(0|111))|1(00|(01|1101*0)(001*0)*1)((00|1)0|((00|1)1|0101*0)(001*0)*1)*(011|((00|1)1|0101*0)(001*0)*01))_0
# 0: ((0|111|1(01|101*0)(001*0)*01)|1(00|(01|1101*0)(001*0)*1)((00|1)0|((00|1)1|0101*0)(001*0)*1)*(011|((00|1)1|0101*0)(001*0)*01))_0
# 0: ((0|111|1(01|101*0)(001*0)*01)|1(00|(01|1101*0)(001*0)*1)((00|1)0|((00|1)1|0101*0)(001*0)*1)*(011|((00|1)1|0101*0)(001*0)*01))_0
# 0 111

# 110 1*
# # 0: 0, 1
# # 1: 2, 3
# # 2: 4, 5
# # 3: 6, 0
# # 4: 1, 2
# # 5: 3, 4
# # 6: 5, 6

# # 0 1

# 1->2
# 4->2
# 6->5
# 2->5
# 2->4
# 5->4
# 4-> 1

# 5-4 1
# 2-4 0
# 4-2 1
# 1-2 0
# 6-6 1
# 3-6 0
# 0-1 1
# 4-1 0
# 2-5 1
# 6-5 0
# 1-3 1
# 5-3 0
# 3-0 1
# 0-0 0

# # 0|((01*0|(0|1)1)0|1)1



# # 0: 0, 1
# # 1: 0_2 10_6 11_0
# # 2: 4, 5
# # 4: 1, 2
# # 5: 00_6 01_0, 4
# # 6: 5, 6

# # 0: 0, 1
# # 1: 0_2 101*0_5 11_0
# # 2: 4, 5
# # 4: 1, 2
# # 5: 001*0_5 01_0 1_4

# # 0: 0, 1
# # 1: 00_4 (01|101*0)_5 11_0
# # 4: 0_1, 10_4, 11_5
# # 5: 001*0_5 01_0 1_4

# # 0: 0, 1
# # 1: 00(10)*0_1 (01|101*0|00(10)*11)_5 11_0
# # 5: (1(10)*11|001*0)_5 01_0 1(10)*0_1


# # 0: 0|1(00(10)*0)*11    1(01|101*0|00(10)*11)_5
# # 5: (1(10)*11|001*0|1(10)*0(00(10)*0)*(01|101*0|00(10)*11))_5 (01|1(10)*0(00(10)*0)*11)_0

# # 0: (0|1(00(10)*0)*11|1(01|101*0|00(10)*11)(1(10)*11|001*0|1(10)*0(00(10)*0)*(01|101*0|00(10)*11))*(01|1(10)*0(00(10)*0)*11))*


# # 0 | 1(00(10)*0)*
# # 0: (0|1
# #     (00(10)*0 | ((01|101*0|00(10)*11) (1(10)*11|001*0)* 1(10)*0)
# #     11_0
# #     (01|101*0|00(10)*11) (1(10)*11|001*0)* 01
# #     (01|101*0|00(10)*11) (1(10)*11|001*0)* 01_0
# #     _1
# #    
# # 1: 00(10)*0_1 (01|101*0|00(10)*11)_5 11_0
# # 5: (1(10)*11|001*0)_5 01_0 1(10)*0_1
# # --2
# # 0: 0, 1
# # 1: 0_2 101*0_5 11_0
# # 2: 00_1 01_2 1_5
# # 5: 001*0_5 01_0 10_1 11_2

# # 0: 0, 1
# # 1: 0(01)*00_1 (0(01)*1|101*0)_5 11_0
# # 2: 00_1 01_2 1_5
# # 5: 001*0_5 01_0 10_1 11(01)*00_1 11_2


# #     111
# #    1110
# #   11100
# #   10101
# #  100011
# #  101010
# #  110001

# solution = r'^(0|1(00(10)*0|((01|101*0|00(10)*11)(1(10)*11|001*0)*1(10)*0))*(1|(01|101*0|00(10)*11)(1(10)*11|001*0)*01)1)+$'
# solution = r'^0|(1(0(01|111|000)*(00|11(10)*0))*(1|0(01|111)*1(001*0)*0)(01*0(1(10|000|111)*(00|1)(01)*1)*(0|1(10|000|111)*01))*10*)+$'
# solution = '\A((0|1(0(111|01)*(00|110))*(1|0(111|01)*10)(01*0(0|11(111|01)*10|(10|11(111|01)*(00|110))(0(111|01)*(00|110))*(1|0(111|01)*10)))*1)0*)+\Z'
# solution = '^(0|1((1(01*00)*01*010|(0|1(01*00)*01*011)(((0|11)1|10(01*00)*01*011))*((0|11)0|10(01*00)*01*010)))*(1(01*00)*1|(0|1(01*00)*01*011)(((0|11)1|10(01*00)*01*011))*10(01*00)*1))+$'
# solution = r'^(0|(10((0|11)(1|00))*(10|(0|11)01)|11)(01*0(0|101|1(1|00)((0|11)(1|00))*(10|(0|11)01)))*1)+$'
# solution = r'(0|1(1|(0((0|11)(1|00))*(10|(11|0)01)))(01*0(0|1((00|1)(0|11))*(01|(1|00)10)))*1)+$'

